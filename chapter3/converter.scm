(define (adder a1 a2 sum)
    (define (process_new_value)
        (cond ((and (has_value? a1) (has_value? a2))
               (set_value! sum (+ (get_value a1) (get_value a2)) me))
              ((and (has_value? a1) (has_value? sum))
               (set_value! a2 (- (get_value sum) (get_value a1)) me))
              ((and (has_value? a2) (has_value? sum))
               (set_value! a1 (- (get_value sum) (get_value a2)) me))))
    
    (define (process_forget_value)
        (forget_value! sum me)
        (forget_value! a1 me)
        (forget_value! a2 me)
        (process_new_value))
    
    (define (me request)
        (cond ((eq? request 'I-have-a-value)
               (process_new_value))
              ((eq? request 'I-lost-my-value)
               (process_forget_value))
              (else
                (error "Unknown request -- ADDER" request))))
    
    (connect a1 me)
    (connect a2 me)
    (connect sum me)
    me)

(define (multiplier m1 m2 product)
    (define (process_new_value)
        (cond ((or (and (has_value? m1) (= (get_value m1) 0))
                   (and (has_value? m2) (= (get_value m2) 0)))
               (set_value! product 0 me))
              ((and (has_value? m1) (has_value? m2))
               (set_value! product (* (get_value m1) (get_value m2)) me))
              ((and (has_value? m1) (has_value? product))
               (set_value! m2 (/ (get_value product) (get_value m1)) me))
              ((and (has_value? m2) (has_value? product))
               (set_value! m1 (/ (get_value product) (get_value m2)) me))))
    
    (define (process_forget_value)
        (forget_value! product me)
        (forget_value! m1 me)
        (forget_value! m2 me)
        (process_new_value))
    
    (define (me request)
        (cond ((eq? request 'I-have-a-value)
               (process_new_value))
              ((eq? request 'I-lost-my-value)
               (process_forget_value))
              (else
                (error "Unknown request -- MULTIPLIER" request))))
    
    (connect m1 me)
    (connect m2 me)
    (connect product me)
    me)

(define (constant value connector)
    (define (me request)
        (error "Unknown request -- CONSTANT" request))
    (connect connector me)
    (set_value! connector value me)
    me)

(define (probe name connector)
    (define (print_probe value)
        (newline)
        (display "Prob: ")
        (display name)
        (display " = ")
        (display value))

    (define (process_new_value)
        (print_probe (get_value connector)))

    (define (process_forget_value)
        (print_probe "?"))

    (define (me request)
        (cond ((eq? request 'I-have-a-value)
               (process_new_value))
              ((eq? request 'I-lost-my-value)
               (process_forget_value))
              (else
                (error "Unknown request -- PROBE" request))))

    (connect connector me)
    me)

(define (inform_about_value constraint)
    (constraint 'I-have-a-value))

(define (inform_about_no_value constraint)
    (constraint 'I-lost-my-value))

(define (make_connector)
    (let ((value false)
          (informant false)
          (constraints '()))
        (define (set_my_value newval setter)
            (cond ((not (has_value? me))
                   (set! value newval)
                   (set! informant setter)
                   (for_each_expect setter inform_about_value constraints))
                  ((not (= value newval))
                   (error "Contradiction" (list value newval)))
                  (else 'ignored)))

        (define (forget_my_value retractor)
            (if (eq? retractor informant)
                (begin (set! informant false)
                       (for_each_expect retractor inform_about_no_value constraints))
                'ignored))

        (define (connect new_constraint)
            (if (not (memq new_constraint constraints))
                (set! constraints (cons new_constraint constraints)))
            (if (has_value? me)
                (inform_about_value new_constraint))
            'done)

        (define (me request)
            (cond ((eq? request 'has_value?)
                   (if informant true false))
                  ((eq? request 'value) value)
                  ((eq? request 'set_value!) set_my_value)
                  ((eq? request 'forget) forget_my_value)
                  ((eq? request 'connect) connect)
                  (else (error "Unknown operation -- CONNECTOR" request))))
        me))

(define (for_each_expect expection procedure list)
    (define (loop items)
        (cond ((null? items) 'done)
              ((eq? (car items) expection) (loop (cdr items)))
              (else (procedure (car items)) (loop (cdr items)))))
    (loop list))

(define (has_value? connector)
    (connector 'has_value?))

(define (get_value connector)
    (connector 'value))

(define (set_value! connector new_value informant)
    ((connector 'set_value!) new_value informant))

(define (forget_value! connector retractor)
    ((connector 'forget) retractor))

(define (connect connector new_constraint)
    ((connector 'connect) new_constraint))


; test
(define C (make_connector))
(define F (make_connector))
(define (celsius_fahrenheit_converter c f)
    (let ((u (make_connector))
          (v (make_connector))
          (w (make_connector))
          (x (make_connector))
          (y (make_connector)))
        (multiplier c w u)
        (multiplier v x u)
        (adder v y f)
        (constant 9 w)
        (constant 5 x)
        (constant 32 y)
        'ok))
(celsius_fahrenheit_converter C F)
(probe "Celsius temp" C)
(probe "Fahrenheit temp" F)

(set_value! C 25 'user)

(forget_value! C 'user)

(set_value! F 212 'user)
