(define (triples s t u)
    (cons-stream (list (stream-car s) (stream-car t) (stream-car u))
                 (interleave (stream-map (lambda (x) (cons (stream-car s) x)) (stream-cdr (pairs t u)))
                             (triples (stream-cdr s) (stream-cdr t) (stream-cdr u)))))

(define (phythagorean_number)
    (let ((numbers (triples integers integers integers)))
        (stream-filter (lambda (x) (= (+ (square (car x) (square (cadr x))))
                                      (square (caddr x))))
                       numbers)))
