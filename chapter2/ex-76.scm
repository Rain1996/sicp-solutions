; 加入一个新类型或新操作时，系统所必须做的修改：
; 显式分派 -- 加入新类型需要避免命名冲突
             加入新操作所有的通用操作都必须修改
; 数据导向 -- 通过包的机制可以很方便地加入新类型和
;            新操作而不用对之前的进行修改
; 消息传递 -- 可以很方便地加入新类型
;            加入新操作需要修改所有的通用操作

; 综上，适合经常加入新类型的系统 -> 数据导向或消息传递
; 适合经常加入新操作的系统 -> 数据导向
